name: Build OpenWrt IPK for MT7620/MT7621

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target:
          - name: ramips-mt7620
            sdk_url: https://archive.openwrt.org/barrier_breaker/14.07/ramips/mt7620a/OpenWrt-SDK-ramips-for-linux-x86_64-gcc-4.8-linaro_uClibc-0.9.33.2.tar.bz2
            sdk_format: bz2
            openwrt_version: "14.07"
          - name: ramips-mt7621
            sdk_url: https://archive.openwrt.org/releases/23.05.0/targets/ramips/mt7621/openwrt-sdk-23.05.0-ramips-mt7621_gcc-12.3.0_musl.Linux-x86_64.tar.xz
            sdk_format: xz
            openwrt_version: "23.05"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Free up disk space
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          df -h

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libncurses5-dev gawk git libssl-dev \
            gettext zlib1g-dev swig unzip time rsync python3 python3-setuptools \
            subversion mercurial wget curl bzip2 xz-utils file

      - name: Download and extract OpenWrt SDK
        run: |
          echo "Downloading SDK from: ${{ matrix.target.sdk_url }}"
          
          if [ "${{ matrix.target.sdk_format }}" = "bz2" ]; then
            wget -O openwrt-sdk.tar.bz2 "${{ matrix.target.sdk_url }}"
            echo "Extracting bz2 archive..."
            tar -xjf openwrt-sdk.tar.bz2
          else
            wget -O openwrt-sdk.tar.xz "${{ matrix.target.sdk_url }}"
            echo "Extracting xz archive..."
            tar -xJf openwrt-sdk.tar.xz
          fi
          
          echo "=== Contents after extraction ==="
          ls -la
          
          # 查找 SDK 目录（不区分大小写）
          SDK_DIR=$(find . -maxdepth 1 -type d \( -name "*SDK*" -o -name "*sdk*" \) | grep -v "^\.$" | head -n 1)
          
          if [ -z "$SDK_DIR" ]; then
            echo "ERROR: SDK directory not found!"
            echo "Available directories:"
            ls -la
            exit 1
          fi
          
          echo "Found SDK directory: $SDK_DIR"
          mv "$SDK_DIR" openwrt-sdk
          echo "SDK extracted and renamed successfully"
          
          echo "=== SDK contents ==="
          ls -la openwrt-sdk/

      - name: Prepare package directory
        run: |
          mkdir -p openwrt-sdk/package/microsocks/src
          mkdir -p openwrt-sdk/package/microsocks/files
          
          # 复制仓库中的 microsocks 源码
          cp -r microsocks/* openwrt-sdk/package/microsocks/src/
          echo "Source files copied:"
          ls -la openwrt-sdk/package/microsocks/src/
          
      - name: Create Makefile for microsocks
        run: |
          if [ "${{ matrix.target.openwrt_version }}" = "14.07" ]; then
            # OpenWrt 14.07 (Barrier Breaker) 兼容的 Makefile
            cat > openwrt-sdk/package/microsocks/Makefile << 'EOF'
          include $(TOPDIR)/rules.mk

          PKG_NAME:=microsocks
          PKG_VERSION:=1.0.5
          PKG_RELEASE:=1

          PKG_BUILD_DIR:=$(BUILD_DIR)/$(PKG_NAME)-$(PKG_VERSION)

          include $(INCLUDE_DIR)/package.mk

          define Package/microsocks
            SECTION:=net
            CATEGORY:=Network
            TITLE:=Tiny, portable SOCKS5 server
            URL:=https://github.com/rofl0r/microsocks
            DEPENDS:=+libpthread
          endef

          define Package/microsocks/description
            Microsocks is a tiny, portable SOCKS5 server with very moderate
            resource usage for embedded devices.
          endef

          define Build/Prepare
          	mkdir -p $(PKG_BUILD_DIR)
          	$(CP) ./src/* $(PKG_BUILD_DIR)/
          endef

          define Build/Compile
          	$(MAKE) -C $(PKG_BUILD_DIR) \
          		CC="$(TARGET_CC)" \
          		CFLAGS="$(TARGET_CFLAGS) $(TARGET_CPPFLAGS)" \
          		LDFLAGS="$(TARGET_LDFLAGS)" \
          		microsocks
          endef

          define Package/microsocks/install
          	$(INSTALL_DIR) $(1)/usr/bin
          	$(INSTALL_BIN) $(PKG_BUILD_DIR)/microsocks $(1)/usr/bin/
          	$(INSTALL_DIR) $(1)/etc/init.d
          	$(INSTALL_BIN) ./files/microsocks.init $(1)/etc/init.d/microsocks
          	$(INSTALL_DIR) $(1)/etc/config
          	$(INSTALL_CONF) ./files/microsocks.config $(1)/etc/config/microsocks
          endef

          $(eval $(call BuildPackage,microsocks))
          EOF
          else
            # OpenWrt 23.05+ 的 Makefile
            cat > openwrt-sdk/package/microsocks/Makefile << 'EOF'
          include $(TOPDIR)/rules.mk

          PKG_NAME:=microsocks
          PKG_VERSION:=1.0.5
          PKG_RELEASE:=1

          PKG_LICENSE:=MIT
          PKG_LICENSE_FILES:=COPYING
          PKG_MAINTAINER:=rofl0r

          PKG_BUILD_DIR:=$(BUILD_DIR)/$(PKG_NAME)-$(PKG_VERSION)
          PKG_BUILD_PARALLEL:=1

          include $(INCLUDE_DIR)/package.mk

          define Package/microsocks
            SECTION:=net
            CATEGORY:=Network
            TITLE:=Tiny, portable SOCKS5 server
            URL:=https://github.com/rofl0r/microsocks
            DEPENDS:=+libpthread
          endef

          define Package/microsocks/description
            Microsocks is a tiny, portable SOCKS5 server with very moderate
            resource usage for embedded devices.
          endef

          define Build/Prepare
          	mkdir -p $(PKG_BUILD_DIR)
          	$(CP) ./src/* $(PKG_BUILD_DIR)/
          endef

          define Build/Compile
          	$(MAKE) -C $(PKG_BUILD_DIR) \
          		CC="$(TARGET_CC)" \
          		CFLAGS="$(TARGET_CFLAGS) $(TARGET_CPPFLAGS)" \
          		LDFLAGS="$(TARGET_LDFLAGS)" \
          		microsocks
          endef

          define Package/microsocks/install
          	$(INSTALL_DIR) $(1)/usr/bin
          	$(INSTALL_BIN) $(PKG_BUILD_DIR)/microsocks $(1)/usr/bin/
          	$(INSTALL_DIR) $(1)/etc/init.d
          	$(INSTALL_BIN) ./files/microsocks.init $(1)/etc/init.d/microsocks
          	$(INSTALL_DIR) $(1)/etc/config
          	$(INSTALL_CONF) ./files/microsocks.config $(1)/etc/config/microsocks
          endef

          $(eval $(call BuildPackage,microsocks))
          EOF
          fi

      - name: Create init script
        run: |
          cat > openwrt-sdk/package/microsocks/files/microsocks.init << 'EOF'
          #!/bin/sh /etc/rc.common

          START=90
          STOP=10

          USE_PROCD=1
          PROG=/usr/bin/microsocks

          start_service() {
              . /lib/functions.sh
              config_load microsocks
              
              local enabled
              local port
              local user
              local auth_user
              local auth_pass
              local bind_addr
              
              config_get_bool enabled config enabled 0
              [ "$enabled" -eq 0 ] && return
              
              config_get port config port 1080
              config_get user config user nobody
              config_get auth_user config auth_user
              config_get auth_pass config auth_pass
              config_get bind_addr config bind_addr 0.0.0.0
              
              procd_open_instance
              procd_set_param command $PROG -i $bind_addr -p $port
              
              [ -n "$auth_user" ] && [ -n "$auth_pass" ] && {
                  procd_append_param command -u "$auth_user"
                  procd_append_param command -P "$auth_pass"
              }
              
              procd_set_param respawn
              procd_close_instance
          }
          EOF
          chmod +x openwrt-sdk/package/microsocks/files/microsocks.init

      - name: Create config file
        run: |
          cat > openwrt-sdk/package/microsocks/files/microsocks.config << 'EOF'
          config microsocks 'config'
              option enabled '0'
              option port '1080'
              option user 'nobody'
              option bind_addr '0.0.0.0'
              # 启用认证（可选）
              # option auth_user 'username'
              # option auth_pass 'password'
          EOF

      - name: Update feeds
        run: |
          cd openwrt-sdk
          ./scripts/feeds update -a || echo "Feed update completed with warnings"
          ./scripts/feeds install -a || echo "Feed install completed with warnings"

      - name: Compile package
        run: |
          cd openwrt-sdk
          make defconfig
          echo "Starting compilation for ${{ matrix.target.name }}..."
          make package/microsocks/compile V=s

      - name: Collect artifacts
        run: |
          mkdir -p artifacts
          
          # 查找 .ipk 文件
          find openwrt-sdk/bin -name "microsocks*.ipk" -exec cp {} artifacts/ \; 2>/dev/null || true
          
          if [ -z "$(ls -A artifacts/)" ]; then
            echo "No IPK files found!"
            echo "Searching for any build output..."
            find openwrt-sdk/bin -type f -name "*.ipk" -o -name "*.apk"
            exit 1
          fi
          
          ls -lh artifacts/
          echo "✅ Build successful for ${{ matrix.target.name }} (OpenWrt ${{ matrix.target.openwrt_version }})"

      - name: Upload IPK artifacts
        uses: actions/upload-artifact@v4
        with:
          name: microsocks-ipk-${{ matrix.target.name }}-openwrt-${{ matrix.target.openwrt_version }}
          path: artifacts/*.ipk
          if-no-files-found: error

      - name: Create checksums
        run: |
          cd artifacts
          md5sum *.ipk > md5sums.txt
          sha256sum *.ipk > sha256sums.txt
          echo "=== MD5 Checksums ==="
          cat md5sums.txt
          echo ""
          echo "=== SHA256 Checksums ==="
          cat sha256sums.txt

      - name: Upload checksums
        uses: actions/upload-artifact@v4
        with:
          name: checksums-${{ matrix.target.name }}-openwrt-${{ matrix.target.openwrt_version }}
          path: |
            artifacts/md5sums.txt
            artifacts/sha256sums.txt
